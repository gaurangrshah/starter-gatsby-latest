{"version":3,"sources":["webpack:///./src/pages/services.js"],"names":["ServicesPage","data","allStrapiSection","edges","servicesHero","services","console","log","pageTagline","fluid","overflow","component","hero","position","top","flexDirection","alignItems","mr","mt","w","color","textAlign","shadow","config","heading","border","tagline","fontSize","link","isDefault","isMoreLink","alignSelf","node","block","mb","justifyContent","flexWrap","cards","map","card","i","key","minH","mx","truncate","as","Box","p","icon","content","display","pattern","py","maxW","MAX_WIDTH","max","responsive","flexBasis","borderBottom","query"],"mappings":"2FAAA,sHA+HeA,UA3GM,SAAC,GAAc,IAAD,IAAXC,KAC4BC,iBAAiBC,MAAhDC,GADc,WACAC,EADA,KAKjC,OAFAC,QAAQC,IAAIF,GAGV,kBAAC,IAAD,CAAeG,YAAa,IAC1B,kBAAC,IAAD,CAAeC,OAAK,EAACC,SAAS,UAC5B,kBAAC,IAAoBC,IAAUC,MAC/B,kBAAC,IAAD,CACEC,SAAS,WACTC,IAAI,IACJC,cAAc,SACdC,WAAW,WACXC,GAAI,CAAC,GAAI,KAAM,KAAM,IACrBC,GAAI,CAAC,GAAI,MAAO,KAAM,IACtBC,EAAE,QAEF,kBAAC,IAAD,CAASC,OAAK,EAACC,UAAU,OAAOR,SAAS,YACvC,kBAAC,IAAD,eACES,QAAM,EACNT,SAAS,WACTU,OAAQ,CACNC,QAAS,CAAEC,QAAQ,GACnBC,QAAS,CAAED,QAAQ,EAAME,SAAU,MACnCC,KAAM,CACJC,WAAW,EACXC,YAAY,EACZC,UAAW,cAGX3B,EAAa4B,KAAKC,MAAMA,SAGhC,kBAAC,IAAD,CACEd,EAAG,CAAC,OAAQ,KAAM,KAAM,OACxBF,GAAI,EACJiB,GAAI,CAAC,GAAI,KAAM,KAAM,IAErB,kBAAC,IAAD,CAAMC,eAAe,SAASC,SAAS,OAAOf,UAAU,QACrDjB,EAAa4B,KAAKC,MAAMI,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACjC,kBAAC,IAAD,eACEC,IAAKD,EACLrB,EAAG,CAAC,QAAS,KAAM,KAAM,SACzBuB,KAAK,QACLC,GAAG,OACHC,SAAU,KACNL,EANN,CAOEhB,OAAQ,CACNK,KAAM,CAAEiB,GAAIC,IAAKC,EAAG,GACpBC,KAAM,CAAE5B,MAAO,aACf6B,QAAS,CAAEC,QAAS,CAAC,OAAQ,KAAM,KAAM,qBAQvD,kBAAC,IAAD,CAAezC,OAAK,EAAC0C,SAAO,EAACC,GAAI,GAAIT,GAAG,QACtC,kBAAC,IAAD,CACE9B,SAAS,WACTM,EAAE,MACFkC,KAAMC,IACNX,GAAG,OACHtB,UAAU,UAEV,kBAAC,IAAD,iBACMhB,EAAS2B,KAAKC,MAAMA,MAD1B,CAEEV,OAAQ,CACNC,QAAS,CACPG,SAAU,YAKlB,kBAAC,IAAD,CACElB,OAAK,EACL8C,KAAG,EACHC,YAAU,GAUTnD,EAAS2B,KAAKC,MAAMI,MAAMC,KAAI,SAACC,EAAMC,GAAP,OAC7B,kBAAC,IAAD,eACEC,IAAKD,EACLG,GAAG,OACHxB,EAAG,CAAC,QAAS,QAAS,KAAM,SAC5BsC,UAAW,QAEXC,aAAa,0BACTnB,EAPN,CAQEhB,OAAQ,CAAEK,KAAM,CAAEmB,EAAG,kBAW5B,IAAMY,EAAK","file":"component---src-pages-services-js-e4cbb5d7cb894abd3543.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { Box, Flex, Grid, SimpleGrid } from \"@chakra-ui/core\"\n\nimport DefaultLayout from \"../gatsby-plugin-chakra-ui/layouts/default\"\n\nimport {\n  test,\n  component,\n  linearGradient,\n  MAX_WIDTH,\n  BackgroundImage,\n  BaseContainer,\n  Block,\n  Content,\n  PreFooter,\n  Row,\n  SimpleCard,\n} from \"../components\"\n\nconst ServicesPage = ({ data }) => {\n  const [preFoooter, servicesHero, services] = data.allStrapiSection.edges\n\n  console.log(services)\n\n  return (\n    <DefaultLayout pageTagline={\"\"}>\n      <BaseContainer fluid overflow=\"hidden\">\n        <BackgroundImage {...component.hero} />\n        <Row\n          position=\"absolute\"\n          top=\"0\"\n          flexDirection=\"column\"\n          alignItems=\"flex-end\"\n          mr={[12, null, null, 12 * 4]}\n          mt={[12, \"20%\", null, 12 * 4]}\n          w=\"100%\"\n        >\n          <Content color textAlign=\"left\" position=\"relative\">\n            <Block\n              shadow\n              position=\"relative\"\n              config={{\n                heading: { border: true },\n                tagline: { border: true, fontSize: \"xl\" },\n                link: {\n                  isDefault: false,\n                  isMoreLink: true,\n                  alignSelf: \"flex-end\",\n                },\n              }}\n              {...servicesHero.node.block.block}\n            />\n          </Content>\n          <Content\n            w={[\"100%\", null, null, \"70%\"]}\n            mr={5}\n            mb={[12, null, null, 0]}\n          >\n            <Flex justifyContent=\"center\" flexWrap=\"wrap\" textAlign=\"left\">\n              {servicesHero.node.block.cards.map((card, i) => (\n                <SimpleCard\n                  key={i}\n                  w={[\"150px\", null, null, \"250px\"]}\n                  minH=\"150px\"\n                  mx=\"auto\"\n                  truncate={120}\n                  {...card}\n                  config={{\n                    link: { as: Box, p: 3 },\n                    icon: { color: \"lightblue\" },\n                    content: { display: [\"none\", null, null, \"block\"] },\n                  }}\n                />\n              ))}\n            </Flex>\n          </Content>\n        </Row>\n      </BaseContainer>\n      <BaseContainer fluid pattern py={12} mx=\"auto\">\n        <Content\n          position=\"relative\"\n          w=\"80%\"\n          maxW={MAX_WIDTH}\n          mx=\"auto\"\n          textAlign=\"center\"\n        >\n          <Block\n            {...services.node.block.block}\n            config={{\n              heading: {\n                fontSize: \"2xl\",\n              },\n            }}\n          />\n        </Content>\n        <Row\n          fluid\n          max\n          responsive\n          // maxW={MAX_WIDTH}\n          // h={[\"1400px\", \"1200px\", null, \"800px\"]}\n          // mx=\"auto\"\n          // display=\"flex\"\n          // justifyContent={\"center\"}\n          // alignItems={[\"center\", null, null, \"initial\"]}\n          // alignContent={[\"space-between\", null, null, \"initial\"]}\n          // flexWrap=\"wrap\"\n        >\n          {services.node.block.cards.map((card, i) => (\n            <SimpleCard\n              key={i}\n              mx=\"auto\"\n              w={[\"250px\", \"150px\", null, \"250px\"]}\n              flexBasis={\"250px\"}\n              // h={[\"250px\", null, null, \"180px\"]}\n              borderBottom=\"10px solid transparent\"\n              {...card}\n              config={{ link: { p: \"1em\" } }}\n            />\n          ))}\n        </Row>\n      </BaseContainer>\n    </DefaultLayout>\n  )\n}\n\nexport default ServicesPage\n\nexport const query = graphql`\n  query ServicesQueryBasic {\n    allStrapiSection(\n      filter: { pages: { elemMatch: { name: { eq: \"services\" } } } }\n    ) {\n      edges {\n        node {\n          block {\n            block {\n              text {\n                type\n                text\n                order\n              }\n              link {\n                path\n                label\n                isEnabled\n              }\n              image {\n                alternativeText\n                caption\n                size\n                name\n                formats {\n                  large {\n                    url\n                    width\n                    height\n                  }\n                  medium {\n                    url\n                    width\n                    height\n                  }\n                }\n              }\n              content {\n                content\n              }\n            }\n            cards {\n              text {\n                type\n                text\n              }\n              link {\n                path\n                label\n                isEnabled\n              }\n              icon\n              content {\n                content\n              }\n            }\n          }\n          name\n          order\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}