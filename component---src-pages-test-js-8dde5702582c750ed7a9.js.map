{"version":3,"sources":["webpack:///./node_modules/@chakra-ui/core/dist/esm/chakra-provider.js","webpack:///./src/gatsby-plugin-chakra-ui/layouts/global.js","webpack:///./src/gatsby-plugin-chakra-ui/layouts/default.js","webpack:///./src/pages/test.js","webpack:///./node_modules/focus-visible/dist/focus-visible.js"],"names":["props","_theme$config","children","colorModeManager","portalZIndex","_props$resetCSS","resetCSS","_props$theme","theme","useSystemColorMode","config","zIndex","Global","styles","css","DefaultLayout","header","prefooter","seo","allowPanelUpdate","rest","colorMode","useColorMode","site","useSiteMetadata","title","brandColors","themeUpdate","colors","brand","isClient","console","log","siteTitle","id","color","fontFamily","siteTagline","as","mt","className","fluid","bg","py","mb","toUpperCase","TestPage","breakpoints","zIndices","sizes","space","shadows","allowSidebarUpdate","gradients","applyFocusVisiblePolyfill","scope","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesWhitelist","text","search","url","tel","email","password","number","date","month","week","time","datetime","isValidFocusTarget","el","document","nodeName","classList","addFocusVisibleClass","contains","add","setAttribute","onPointerDown","e","addInitialPointerMoveListeners","addEventListener","onInitialPointerMove","target","toLowerCase","removeEventListener","metaKey","altKey","ctrlKey","activeElement","visibilityState","type","tagName","readOnly","isContentEditable","hasAttribute","window","clearTimeout","setTimeout","remove","removeAttribute","nodeType","Node","DOCUMENT_FRAGMENT_NODE","host","DOCUMENT_NODE","documentElement","event","CustomEvent","error","createEvent","initCustomEvent","dispatchEvent","factory"],"mappings":"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","file":"component---src-pages-test-js-8dde5702582c750ed7a9.js","sourcesContent":["import CSSReset from \"@chakra-ui/css-reset\";\nimport { PortalManager } from \"@chakra-ui/portal\";\nimport { ColorModeProvider, ThemeProvider, GlobalStyle } from \"@chakra-ui/system\";\nimport defaultTheme from \"@chakra-ui/theme\";\nimport * as React from \"react\";\n/**\n * The global provider that must be added to make all Chakra components\n * work correctly\n */\n\nexport var ChakraProvider = function ChakraProvider(props) {\n  var _theme$config;\n\n  var children = props.children,\n      colorModeManager = props.colorModeManager,\n      portalZIndex = props.portalZIndex,\n      _props$resetCSS = props.resetCSS,\n      resetCSS = _props$resetCSS === void 0 ? true : _props$resetCSS,\n      _props$theme = props.theme,\n      theme = _props$theme === void 0 ? defaultTheme : _props$theme;\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme\n  }, /*#__PURE__*/React.createElement(ColorModeProvider, {\n    colorModeManager: colorModeManager,\n    useSystemColorMode: !!((_theme$config = theme.config) == null ? void 0 : _theme$config.useSystemColorMode)\n  }, resetCSS && /*#__PURE__*/React.createElement(CSSReset, null), /*#__PURE__*/React.createElement(GlobalStyle, null), portalZIndex ? /*#__PURE__*/React.createElement(PortalManager, {\n    zIndex: portalZIndex\n  }, children) : children));\n};","import React from \"react\"\nimport { Global as EmotionGlobal, css } from \"@emotion/core\"\nimport \"focus-visible/dist/focus-visible\"\n\nexport const Global = () => {\n  return (\n    <EmotionGlobal\n      styles={css`\n        /*\n        This will hide the focus indicator if the element receives focus via the mouse,\n        but it will still show up on keyboard focus.\n        https://medium.com/@keeganfamouss/accessibility-on-demand-with-chakra-ui-and-focus-visible-19413b1bc6f9\n      */\n        .js-focus-visible :focus:not([data-focus-visible-added]) {\n          outline: none;\n          box-shadow: none;\n        }\n        * {\n          border: 0;\n          margin: 0;\n          padding: 0;\n          box-sizing: border-box;\n          & :before {\n            box-sizing: border-box;\n          }\n        }\n\n        input:focus {\n          border: inherit;\n        }\n        input:focus:invalid {\n          background: rgba(255, 224, 224, 1);\n        }\n        input:valid,\n        input:focus:valid {\n          background: rgba(226, 250, 219, 1);\n        }\n        a:active,\n        a:focus,\n        a:visited {\n          outline: 0;\n          border: none;\n          outline-style: none;\n          -moz-outline-style: none;\n          text-decoration: none;\n          box-shadow: 0 0 0 1px rgba(0, 0, 0, 0) !important;\n          -moz-box-shadow: 0 0 0 1px rgba(0, 0, 0, 0) !important;\n          -webkit-box-shadow: 0 0 0 1px rgba(0, 0, 0, 0) !important;\n        }\n        a:hover {\n          text-decoration: none;\n        }\n        a[aria-current=\"page\"].nav-link {\n          color: #1a5eef;\n          background: #d9e4fd;\n          border-radius: 5px;\n          pointer-events: none;\n        }\n        a {\n          color: inherit;\n        }\n        html,\n        body {\n          font-size: 16px;\n          max-width: 100vw;\n          height: 100%;\n          box-sizing: border-box;\n          scroll-behavior: smooth;\n          font-family: \"Encode Sans\", sans-serif;\n        }\n        body {\n          margin: 0;\n          padding: 0;\n          line-height: 1.35em;\n          text-rendering: optimizeLegibility;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n          -webkit-overflow-scrolling: touch;\n          max-width: 100%;\n          height: 100%;\n        }\n        #content-wrapper {\n          display: flex;\n          flex-direction: column;\n          max-width: 100%;\n          overflow-x: hidden;\n          z-index: 0;\n        }\n        header,\n        footer {\n          position: fixed;\n          width: 100%;\n          z-index: 1500;\n        }\n        header {\n          top: 0;\n        }\n        main {\n          flex: 1 0 auto;\n          overflow: auto;\n          max-width: 100%;\n          overflow-x: hidden;\n        }\n        footer {\n          bottom: 0;\n        }\n      `}\n    />\n  )\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Box, ChakraProvider, useColorMode } from \"@chakra-ui/core\"\n// import { merge } from \"@chakra-ui/utils\"\n\nimport theme from \"../theme\"\nimport { Global } from \"./global\"\n\nimport SEO from \"../../components/seo\"\nimport {\n  BaseContainer,\n  Header,\n  Footer,\n  ModeToggle,\n  Sidebar,\n  Sink,\n  PreFooter,\n} from \"../../components\"\n\nimport useSiteMetadata from \"../../hooks/use-site-metadata\"\n\n// import { isDev } from \"../../utils\"\nimport { PanelProvider } from \"../../contexts/panel-context\"\nimport { isClient } from \"../../utils/tools/tools\"\n\nimport \"../../styles/main.scss\"\n\nconst DefaultLayout = ({\n  header = true,\n  prefooter = true,\n  seo,\n  allowPanelUpdate = false,\n  children,\n  ...rest\n}) => {\n  const { colorMode } = useColorMode()\n  const site = useSiteMetadata()\n  const {\n    title,\n    // tagline,\n    brandColors,\n  } = site\n\n  const themeUpdate = {\n    ...theme,\n    colors: {\n      ...theme.colors,\n      brand: {\n        ...theme.colors.brand,\n        ...brandColors, // : { primary, secondary }\n      },\n    },\n  }\n\n  isClient && console.log(\"⭕️themeUpdate\", themeUpdate)\n\n  return (\n    <>\n      <Global />\n      <SEO seo={{ siteTitle: title, ...seo }} />\n      <ChakraProvider resetCSS theme={themeUpdate}>\n        <ModeToggle />\n        <PanelProvider {...{ allowPanelUpdate }}>\n          <Sidebar>\n            <Sink />\n          </Sidebar>\n          <Box\n            id=\"content-wrapper\"\n            color={`mode.${colorMode}.text`}\n            fontFamily=\"body\"\n          >\n            {header && (\n              <Header siteTitle={title} siteTagline={seo?.siteTagline} />\n            )}\n            <Box as=\"main\" {...rest} mt={10}>\n              {children}\n            </Box>\n          </Box>\n        </PanelProvider>\n        {prefooter && (\n          <BaseContainer\n            className=\"pre-footer\"\n            fluid\n            bg=\"bg\"\n            py={12}\n            mb={[12, null, 0]}\n          >\n            <PreFooter />\n          </BaseContainer>\n        )}\n        <Footer siteTitle={title.toUpperCase()} siteTagline={\"\"} />\n      </ChakraProvider>\n    </>\n  )\n}\n\nDefaultLayout.propTypes = {\n  header: PropTypes.bool,\n  pageTagline: PropTypes.string,\n  children: PropTypes.node.isRequired,\n}\n\nexport default DefaultLayout\n","import React from \"react\"\nimport { theme } from \"@chakra-ui/core\"\nimport DefaultLayout from \"../gatsby-plugin-chakra-ui/layouts/default\"\n\nimport {\n  MotionEntrances,\n  Breakpoints,\n  ZIndices,\n  Sizes,\n  Space,\n  Colors,\n  Shadows,\n  Gradients,\n  Transitions,\n  gradients,\n  SidebarContextWrapper,\n} from \"../components/chakra-ui\"\n\nconst TestPage = () => {\n  const { breakpoints, zIndices, sizes, space, colors, shadows } = theme\n  return (\n    <DefaultLayout\n      seo={{ siteTitle: \"test page\", siteTagline: \"testing ground\" }}\n    >\n      <SidebarContextWrapper id=\"testPage\" allowSidebarUpdate>\n        <Breakpoints breakpoints={breakpoints} />\n        <ZIndices zIndices={zIndices} />\n        <Sizes sizes={sizes} />\n        <Space space={space} />\n        <Colors colors={colors} />\n        <Shadows shadows={shadows} />\n        <Gradients gradients={gradients} />\n        <Transitions />\n        <MotionEntrances />\n      </SidebarContextWrapper>\n    </DefaultLayout>\n  )\n}\n\nexport default TestPage\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory() : typeof define === 'function' && define.amd ? define(factory) : factory();\n})(this, function () {\n  'use strict';\n  /**\n   * Applies the :focus-visible polyfill at the given scope.\n   * A scope in this case is either the top-level Document or a Shadow Root.\n   *\n   * @param {(Document|ShadowRoot)} scope\n   * @see https://github.com/WICG/focus-visible\n   */\n\n  function applyFocusVisiblePolyfill(scope) {\n    var hadKeyboardEvent = true;\n    var hadFocusVisibleRecently = false;\n    var hadFocusVisibleRecentlyTimeout = null;\n    var inputTypesWhitelist = {\n      text: true,\n      search: true,\n      url: true,\n      tel: true,\n      email: true,\n      password: true,\n      number: true,\n      date: true,\n      month: true,\n      week: true,\n      time: true,\n      datetime: true,\n      'datetime-local': true\n    };\n    /**\n     * Helper function for legacy browsers and iframes which sometimes focus\n     * elements like document, body, and non-interactive SVG.\n     * @param {Element} el\n     */\n\n    function isValidFocusTarget(el) {\n      if (el && el !== document && el.nodeName !== 'HTML' && el.nodeName !== 'BODY' && 'classList' in el && 'contains' in el.classList) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Computes whether the given element should automatically trigger the\n     * `focus-visible` class being added, i.e. whether it should always match\n     * `:focus-visible` when focused.\n     * @param {Element} el\n     * @return {boolean}\n     */\n\n\n    function focusTriggersKeyboardModality(el) {\n      var type = el.type;\n      var tagName = el.tagName;\n\n      if (tagName === 'INPUT' && inputTypesWhitelist[type] && !el.readOnly) {\n        return true;\n      }\n\n      if (tagName === 'TEXTAREA' && !el.readOnly) {\n        return true;\n      }\n\n      if (el.isContentEditable) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Add the `focus-visible` class to the given element if it was not added by\n     * the author.\n     * @param {Element} el\n     */\n\n\n    function addFocusVisibleClass(el) {\n      if (el.classList.contains('focus-visible')) {\n        return;\n      }\n\n      el.classList.add('focus-visible');\n      el.setAttribute('data-focus-visible-added', '');\n    }\n    /**\n     * Remove the `focus-visible` class from the given element if it was not\n     * originally added by the author.\n     * @param {Element} el\n     */\n\n\n    function removeFocusVisibleClass(el) {\n      if (!el.hasAttribute('data-focus-visible-added')) {\n        return;\n      }\n\n      el.classList.remove('focus-visible');\n      el.removeAttribute('data-focus-visible-added');\n    }\n    /**\n     * If the most recent user interaction was via the keyboard;\n     * and the key press did not include a meta, alt/option, or control key;\n     * then the modality is keyboard. Otherwise, the modality is not keyboard.\n     * Apply `focus-visible` to any current active element and keep track\n     * of our keyboard modality state with `hadKeyboardEvent`.\n     * @param {KeyboardEvent} e\n     */\n\n\n    function onKeyDown(e) {\n      if (e.metaKey || e.altKey || e.ctrlKey) {\n        return;\n      }\n\n      if (isValidFocusTarget(scope.activeElement)) {\n        addFocusVisibleClass(scope.activeElement);\n      }\n\n      hadKeyboardEvent = true;\n    }\n    /**\n     * If at any point a user clicks with a pointing device, ensure that we change\n     * the modality away from keyboard.\n     * This avoids the situation where a user presses a key on an already focused\n     * element, and then clicks on a different element, focusing it with a\n     * pointing device, while we still think we're in keyboard modality.\n     * @param {Event} e\n     */\n\n\n    function onPointerDown(e) {\n      hadKeyboardEvent = false;\n    }\n    /**\n     * On `focus`, add the `focus-visible` class to the target if:\n     * - the target received focus as a result of keyboard navigation, or\n     * - the event target is an element that will likely require interaction\n     *   via the keyboard (e.g. a text box)\n     * @param {Event} e\n     */\n\n\n    function onFocus(e) {\n      // Prevent IE from focusing the document or HTML element.\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {\n        addFocusVisibleClass(e.target);\n      }\n    }\n    /**\n     * On `blur`, remove the `focus-visible` class from the target.\n     * @param {Event} e\n     */\n\n\n    function onBlur(e) {\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (e.target.classList.contains('focus-visible') || e.target.hasAttribute('data-focus-visible-added')) {\n        // To detect a tab/window switch, we look for a blur event followed\n        // rapidly by a visibility change.\n        // If we don't see a visibility change within 100ms, it's probably a\n        // regular focus change.\n        hadFocusVisibleRecently = true;\n        window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n        hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n          hadFocusVisibleRecently = false;\n        }, 100);\n        removeFocusVisibleClass(e.target);\n      }\n    }\n    /**\n     * If the user changes tabs, keep track of whether or not the previously\n     * focused element had .focus-visible.\n     * @param {Event} e\n     */\n\n\n    function onVisibilityChange(e) {\n      if (document.visibilityState === 'hidden') {\n        // If the tab becomes active again, the browser will handle calling focus\n        // on the element (Safari actually calls it twice).\n        // If this tab change caused a blur on an element with focus-visible,\n        // re-apply the class when the user switches back to the tab.\n        if (hadFocusVisibleRecently) {\n          hadKeyboardEvent = true;\n        }\n\n        addInitialPointerMoveListeners();\n      }\n    }\n    /**\n     * Add a group of listeners to detect usage of any pointing devices.\n     * These listeners will be added when the polyfill first loads, and anytime\n     * the window is blurred, so that they are active when the window regains\n     * focus.\n     */\n\n\n    function addInitialPointerMoveListeners() {\n      document.addEventListener('mousemove', onInitialPointerMove);\n      document.addEventListener('mousedown', onInitialPointerMove);\n      document.addEventListener('mouseup', onInitialPointerMove);\n      document.addEventListener('pointermove', onInitialPointerMove);\n      document.addEventListener('pointerdown', onInitialPointerMove);\n      document.addEventListener('pointerup', onInitialPointerMove);\n      document.addEventListener('touchmove', onInitialPointerMove);\n      document.addEventListener('touchstart', onInitialPointerMove);\n      document.addEventListener('touchend', onInitialPointerMove);\n    }\n\n    function removeInitialPointerMoveListeners() {\n      document.removeEventListener('mousemove', onInitialPointerMove);\n      document.removeEventListener('mousedown', onInitialPointerMove);\n      document.removeEventListener('mouseup', onInitialPointerMove);\n      document.removeEventListener('pointermove', onInitialPointerMove);\n      document.removeEventListener('pointerdown', onInitialPointerMove);\n      document.removeEventListener('pointerup', onInitialPointerMove);\n      document.removeEventListener('touchmove', onInitialPointerMove);\n      document.removeEventListener('touchstart', onInitialPointerMove);\n      document.removeEventListener('touchend', onInitialPointerMove);\n    }\n    /**\n     * When the polfyill first loads, assume the user is in keyboard modality.\n     * If any event is received from a pointing device (e.g. mouse, pointer,\n     * touch), turn off keyboard modality.\n     * This accounts for situations where focus enters the page from the URL bar.\n     * @param {Event} e\n     */\n\n\n    function onInitialPointerMove(e) {\n      // Work around a Safari quirk that fires a mousemove on <html> whenever the\n      // window blurs, even if you're tabbing out of the page. ¯\\_(ツ)_/¯\n      if (e.target.nodeName && e.target.nodeName.toLowerCase() === 'html') {\n        return;\n      }\n\n      hadKeyboardEvent = false;\n      removeInitialPointerMoveListeners();\n    } // For some kinds of state, we are interested in changes at the global scope\n    // only. For example, global pointer input, global key presses and global\n    // visibility change should affect the state at every scope:\n\n\n    document.addEventListener('keydown', onKeyDown, true);\n    document.addEventListener('mousedown', onPointerDown, true);\n    document.addEventListener('pointerdown', onPointerDown, true);\n    document.addEventListener('touchstart', onPointerDown, true);\n    document.addEventListener('visibilitychange', onVisibilityChange, true);\n    addInitialPointerMoveListeners(); // For focus and blur, we specifically care about state changes in the local\n    // scope. This is because focus / blur events that originate from within a\n    // shadow root are not re-dispatched from the host element if it was already\n    // the active element in its own scope:\n\n    scope.addEventListener('focus', onFocus, true);\n    scope.addEventListener('blur', onBlur, true); // We detect that a node is a ShadowRoot by ensuring that it is a\n    // DocumentFragment and also has a host property. This check covers native\n    // implementation and polyfill implementation transparently. If we only cared\n    // about the native implementation, we could just check if the scope was\n    // an instance of a ShadowRoot.\n\n    if (scope.nodeType === Node.DOCUMENT_FRAGMENT_NODE && scope.host) {\n      // Since a ShadowRoot is a special kind of DocumentFragment, it does not\n      // have a root element to add a class to. So, we add this attribute to the\n      // host element instead:\n      scope.host.setAttribute('data-js-focus-visible', '');\n    } else if (scope.nodeType === Node.DOCUMENT_NODE) {\n      document.documentElement.classList.add('js-focus-visible');\n      document.documentElement.setAttribute('data-js-focus-visible', '');\n    }\n  } // It is important to wrap all references to global window and document in\n  // these checks to support server-side rendering use cases\n  // @see https://github.com/WICG/focus-visible/issues/199\n\n\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    // Make the polyfill helper globally available. This can be used as a signal\n    // to interested libraries that wish to coordinate with the polyfill for e.g.,\n    // applying the polyfill to a shadow root:\n    window.applyFocusVisiblePolyfill = applyFocusVisiblePolyfill; // Notify interested libraries of the polyfill's presence, in case the\n    // polyfill was loaded lazily:\n\n    var event;\n\n    try {\n      event = new CustomEvent('focus-visible-polyfill-ready');\n    } catch (error) {\n      // IE11 does not support using CustomEvent as a constructor directly:\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent('focus-visible-polyfill-ready', false, false, {});\n    }\n\n    window.dispatchEvent(event);\n  }\n\n  if (typeof document !== 'undefined') {\n    // Apply the polyfill to the global document, so that no JavaScript\n    // coordination is required to use the polyfill in the top-level document:\n    applyFocusVisiblePolyfill(document);\n  }\n});"],"sourceRoot":""}