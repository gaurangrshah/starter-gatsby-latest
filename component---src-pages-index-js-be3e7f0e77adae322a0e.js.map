{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./node_modules/@chakra-ui/core/dist/es/Grid/index.js","webpack:///./node_modules/@chakra-ui/core/dist/es/SimpleGrid/utils.js","webpack:///./node_modules/@chakra-ui/core/dist/es/SimpleGrid/index.js"],"names":["IndexPage","data","allStrapiSection","edges","homeHero","homeAuthority","pageTagline","fluid","overflow","component","hero","heroContent","heroBlock","config","heading","border","tagline","fontSize","link","isDefault","isMoreLink","alignSelf","node","block","pattern","py","shadow","rounded","color","bg","content","base","p","textAlign","misc","mx","w","isInline","order","spacing","columns","justifyItems","minChildWidth","my","cards","map","card","i","key","minH","text","borderBottom","query","Grid","_ref","ref","gap","rowGap","columnGap","autoFlow","autoRows","autoColumns","templateRows","templateColumns","templateAreas","area","column","row","props","createElement","Box","display","gridArea","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","displayName","px","n","SimpleGrid","spacingX","spacingY","widthToColumns","width","Array","isArray","Object","keys","length","acc","countToColumns","count"],"mappings":"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","file":"component---src-pages-index-js-be3e7f0e77adae322a0e.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { SimpleGrid } from \"@chakra-ui/core\"\n\nimport DefaultLayout from \"../gatsby-plugin-chakra-ui/layouts/default\"\n\nimport {\n  test,\n  component,\n  content,\n  BackgroundImage,\n  BaseContainer,\n  Block,\n  Content,\n  PreFooter,\n  SimpleCard,\n} from \"../components\"\n\nconst IndexPage = ({ data }) => {\n  const [homeHero, homeAuthority, preFooter] = data.allStrapiSection.edges\n  // console.log(data.allStrapiSection.edges)\n  return (\n    <DefaultLayout pageTagline={\"\"}>\n      <BaseContainer fluid overflow=\"hidden\">\n        <BackgroundImage {...component.hero} />\n        <Content {...component.heroContent}>\n          <Block\n            {...component.heroBlock}\n            config={{\n              heading: { border: true },\n              tagline: { border: true, fontSize: \"xl\" },\n              link: {\n                isDefault: false,\n                isMoreLink: true,\n                alignSelf: \"flex-end\",\n              },\n            }}\n            {...homeHero.node.block.block}\n          />\n        </Content>\n      </BaseContainer>\n      <BaseContainer fluid pattern py={12}>\n        <Content shadow rounded color=\"bg4\" bg=\"background\" {...content.base}>\n          <Block\n            p={4}\n            config={{\n              heading: { textAlign: \"center\" },\n              misc: {\n                mx: \"auto\",\n                w: [\"90%\", null, null, \"60%\"],\n                textAlign: \"center\",\n              },\n              content: {\n                w: [\"90%\", null, null, \"70%\"],\n                mx: \"auto\",\n              },\n            }}\n            textAlign=\"center\"\n            {...homeAuthority?.node?.block?.block}\n          >\n            <SimpleGrid\n              isInline\n              order={5}\n              spacing={6}\n              columns={3}\n              justifyItems=\"center\"\n              minChildWidth={\"200px\"}\n              w=\"80%\"\n              mx=\"auto\"\n              my={12}\n              color=\"white\"\n              textAlign=\"left\"\n            >\n              {homeAuthority?.node?.block?.cards?.map((card, i) => (\n                <SimpleCard\n                  key={i}\n                  minH=\"250px\"\n                  config={{ text: { borderBottom: true } }}\n                  {...card}\n                />\n              ))}\n            </SimpleGrid>\n          </Block>\n        </Content>\n      </BaseContainer>\n    </DefaultLayout>\n  )\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  query HomeQueryBasic {\n    allStrapiSection(\n      filter: { pages: { elemMatch: { name: { eq: \"home\" } } } }\n    ) {\n      edges {\n        node {\n          name\n          order\n          block {\n            name\n            block {\n              text {\n                text\n                type\n                order\n              }\n              content {\n                content\n              }\n              image {\n                alternativeText\n                name\n                height\n                width\n                formats {\n                  large {\n                    url\n                    size\n                    name\n                  }\n                  medium {\n                    url\n                    size\n                    name\n                  }\n                }\n              }\n              link {\n                path\n                label\n                isEnabled\n              }\n            }\n            cards {\n              text {\n                text\n                type\n              }\n              link {\n                path\n                label\n                isEnabled\n              }\n              icon\n              content {\n                content\n              }\n            }\n            addons {\n              city\n              email\n              id\n              phone\n              state\n              streetAddress\n              suite\n              zip\n            }\n          }\n          pages {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React, { forwardRef } from \"react\";\nimport Box from \"../Box\";\nvar Grid = forwardRef(function (_ref, ref) {\n  var gap = _ref.gap,\n      rowGap = _ref.rowGap,\n      columnGap = _ref.columnGap,\n      autoFlow = _ref.autoFlow,\n      autoRows = _ref.autoRows,\n      autoColumns = _ref.autoColumns,\n      templateRows = _ref.templateRows,\n      templateColumns = _ref.templateColumns,\n      templateAreas = _ref.templateAreas,\n      area = _ref.area,\n      column = _ref.column,\n      row = _ref.row,\n      props = _objectWithoutPropertiesLoose(_ref, [\"gap\", \"rowGap\", \"columnGap\", \"autoFlow\", \"autoRows\", \"autoColumns\", \"templateRows\", \"templateColumns\", \"templateAreas\", \"area\", \"column\", \"row\"]);\n\n  return React.createElement(Box, _extends({\n    ref: ref,\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns\n  }, props));\n});\nGrid.displayName = \"Grid\";\nexport default Grid;","// These helper fns are modified versions of the amazing rebass library\n// https://github.com/rebassjs/rebass/blob/master/packages/layout/src/index.js\nvar px = function px(n) {\n  return typeof n === \"number\" ? n + \"px\" : n;\n};\n\nexport var widthToColumns = function widthToColumns(width) {\n  if (Array.isArray(width)) {\n    return width.map(widthToColumns);\n  }\n\n  if (width !== null && typeof width === \"object\" && Object.keys(width).length > 0) {\n    var acc = {};\n\n    for (var key in width) {\n      acc[key] = \"repeat(auto-fit, minmax(\" + px(width[key]) + \", 1fr))\";\n    }\n\n    return acc;\n  }\n\n  if (width != null) {\n    return \"repeat(auto-fit, minmax(\" + px(width) + \", 1fr))\";\n  }\n\n  return null;\n};\nexport var countToColumns = function countToColumns(count) {\n  if (Array.isArray(count)) {\n    return count.map(countToColumns);\n  }\n\n  if (count !== null && typeof count === \"object\" && Object.keys(count).length > 0) {\n    var acc = {};\n\n    for (var key in count) {\n      acc[key] = \"repeat(\" + count[key] + \", 1fr)\";\n    }\n\n    return acc;\n  }\n\n  if (count != null) {\n    return \"repeat(\" + count + \", 1fr)\";\n  }\n\n  return null;\n};","import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React, { forwardRef } from \"react\";\nimport Grid from \"../Grid\";\nimport { countToColumns, widthToColumns } from \"./utils\";\nvar SimpleGrid = forwardRef(function (_ref, ref) {\n  var columns = _ref.columns,\n      spacingX = _ref.spacingX,\n      spacingY = _ref.spacingY,\n      spacing = _ref.spacing,\n      minChildWidth = _ref.minChildWidth,\n      props = _objectWithoutPropertiesLoose(_ref, [\"columns\", \"spacingX\", \"spacingY\", \"spacing\", \"minChildWidth\"]);\n\n  var templateColumns = !!minChildWidth ? widthToColumns(minChildWidth) : countToColumns(columns);\n  return React.createElement(Grid, _extends({\n    ref: ref,\n    gap: spacing,\n    columnGap: spacingX,\n    rowGap: spacingY,\n    templateColumns: templateColumns\n  }, props));\n});\nSimpleGrid.displayName = \"SimpleGrid\";\nexport default SimpleGrid;"],"sourceRoot":""}